- name: Install networking tools
  become: true
  pacman:
    name:
      - openssh # Remote access
      - nftables # Firewall (modern alternative to iptables)
      - networkmanager # Network management
      - wireless_tools # For WiFi (if needed)
      - wget # CLI downloads
      - curl # Advanced HTTP client
      - rsync # Efficient file transfers
      - iperf3 # Network performance testing
      - net-tools #
    state: present

# Enable and start service
- name: Enable NetworkManager
  systemd:
    name: NetworkManager
    enabled: yes
    state: started

# Configure Ethernet profile (DHCP)
#- name: Create Ethernet connection
#  command: |
#    nmcli connection add \
#      type ethernet \
#      con-name "Wired" \
#      ifname "{{ ansible_default_ipv4.interface }}" \
#      ipv4.method auto \
#      ipv6.method auto
#  args:
#    creates: /etc/NetworkManager/system-connections/Wired.nmconnection
#  register: nm_create
#  changed_when: nm_create.rc == 0

# Optional: Static IP configuration (alternative to DHCP)
#- name: Set static IP (optional)
#  command: |
#    nmcli connection modify "Wired" \
#      ipv4.method manual \
#      ipv4.addresses "192.168.1.100/24" \
#      ipv4.gateway "192.168.1.1" \
#      ipv4.dns "1.1.1.1,8.8.8.8"
#  when: static_ip | default(false)

# Verify connection
- name: Check Ethernet status
  command: nmcli device show "{{ ansible_default_ipv4.interface }}"
  register: nm_status
  changed_when: false

# Verification output
- name: Display network info
  debug:
    msg: |
      Interface: {{ nm_status.stdout | regex_search('GENERAL.DEVICE:.*') }}
      IP: {{ nm_status.stdout | regex_search('IP4.ADDRESS\[1\]:.*') }}
      State: {{ nm_status.stdout | regex_search('GENERAL.STATE:.*') }}
